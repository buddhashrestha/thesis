from cauli.test.find_intervals import *
import pandas as pd
import numpy as np
from cauli.findVideos import findVideos
import faiss

def search(q,query_type):
    videos = findVideos(q)
    timings = {}
    for each_video in videos:
        df_embeddings = pd.read_csv("/home/buddha/thesis/cauli/data/"+str(each_video) + '/person_embeddings_mapping.csv',sep='\t')
        cols = list(df_embeddings)
        cols.insert(0, cols.pop(cols.index('Embeddings')))
        df_embeddings = df_embeddings.ix[:, cols]

        x = str(df_embeddings['Embeddings'].tolist()).replace("\'", "")
        x = ast.literal_eval(x)
        y = numpy.array(x)
        y = y.astype('float32')
        d = 128
        nlist = 1
        k = 1
        quantizer = faiss.IndexFlatL2(d)  # the other index
        index = faiss.IndexIVFFlat(quantizer, d, nlist, faiss.METRIC_L2)



        index.train(y)  # t and y ma k farak cha?

        index.add(y)  # add may be a bit slower as well

        D, I = index.search(q, k)  # actual search
        pos = [0] * len(I)
        p = [0] * len(I)
        # if face is not present: then add to the list
        if I == [[]]:
            print("Not found")

        else:
            for i in range(len(I)):
                pos[i] = I[i][0]
                p[i] = df_embeddings.iloc[pos[i], 1]


        df_person_bitmap = pd.read_csv("/home/buddha/thesis/cauli/data/"+str(each_video) +'/person_segment_naive.csv',sep='\t')
        person_bitmap = [0] * len(p)
        # print(df_person_bitmap.loc[:])
        print("P: ",p)
        table = pd.read_csv("/home/buddha/thesis/cauli/data/" + str(each_video) + '/person_segment_naive.csv', sep='\t')
        x = table.loc[table['person'] == int(p[0]), table.columns != 'person']['segment'].iloc[0]
        y = table.loc[table['person'] == int(p[1]), table.columns != 'person']['segment'].iloc[0]
        x = ast.literal_eval(x)
        x = numpy.array(x, dtype=float)
        y = ast.literal_eval(y)
        y = numpy.array(y, dtype=float)
        print("Y: ", y)
        print("X: ", x)
        print("Intersectin: ",list(return_intersections(x, y)))
        # exit(0)
    return (list(return_intersections(x, y)))


def interval(person_bitmap):
    table = pd.read_csv("/home/buddha/thesis/cauli/data/"+str(2) + '/person_segment_naive.csv',sep='\t')
    x = table.loc[table['person'] == int(18), table.columns != 'person']['segment'].iloc[0]
    y = table.loc[table['person'] == int(40), table.columns != 'person']['segment'].iloc[0]

    # x = np.fromstring(x[2:-2], sep=',').astype(float)
    #also can be done like this,
    x = ast.literal_eval(x)
    x = numpy.array(x, dtype=float)

    y = np.fromstring(y[2:-2], sep=',').astype(float)
    #also can be done like this,
    # y = ast.literal_eval(y)
    # y = numpy.array(y, dtype=float)
    print("Y: ",y)
    print("X: ",x)
    # print(list(return_intersections(x, y)))



sheldon = [-0.09394396, -0.0325009, 0.04033981, 0.058163, -0.07830061, -0.00957991, 0.00967481, -0.01413031,
           0.09056109, 0.01226895, 0.26494166, -0.02123076, -0.24777047, -0.01763329, -0.07384738, 0.06715217,
           -0.12217229, -0.08997168, -0.07580122, -0.04950837, 0.04795098, 0.13332213, -0.01127091, 0.02197756,
           -0.11553577, -0.27555162, -0.07677643, -0.13606225, 0.04441723, -0.15569574, 0.00895849, 0.14969787,
           -0.11935396, -0.06838058, 0.07786268, 0.03718393, -0.06408153, -0.02089238, 0.23585948, 0.0805631,
           -0.15866175, 0.01856041, 0.00116307, 0.41145056, 0.16814063, 0.02847197, -0.03902237, -0.05839182,
           0.07346018, -0.2937974, 0.11478464, 0.17386746, 0.17906441, 0.07801438, 0.06278698, -0.19769681,
           -0.02882751, 0.14530656, -0.1747098, 0.18388774, 0.02294914, -0.13189943, 0.02977884, -0.12073777,
           0.12760715, 0.01692488, -0.10679697, -0.05800077, 0.18581267, -0.10150822, -0.05918678, 0.1363336,
           -0.13339984, -0.26164994, -0.22236374, 0.06707402, 0.3977724, 0.11571225, -0.23185259, 0.0054906,
           -0.01040609, -0.03162199, 0.04665727, 0.08441081, -0.05217192, -0.03122335, -0.07699484, 0.00657031,
           0.17925991, -0.00695905, -0.06547561, 0.22437108, -0.0341662, -0.03394335, 0.13902065, 0.03442689,
           -0.00662828, -0.03761093, -0.1410363, -0.02334402, -0.00892982, -0.22861557, -0.01857813, 0.06306355,
           -0.14851157, 0.18434337, 0.02413726, -0.01379691, -0.00887952, -0.06088896, -0.07728448, 0.06671096,
           0.24838527, -0.2970275, 0.25738838, 0.14351685, 0.08496048, 0.20006748, -0.00258899, 0.0801791,
           -0.06668909, -0.06449306, -0.18159339, -0.07939189, 0.05472237, -0.00587219, 0.02267785, 0.03292688]

leonard = [-0.13995799, 0.07357684, 0.06817903, -0.03358017, -0.14017977, 0.02780785, -0.00525929, -0.01784202,
           0.06178749, -0.10179561, 0.18950391, -0.01475109, -0.27838451, -0.0266105, -0.08373968, 0.09460582,
           -0.1788917, -0.17850886, -0.12365769, -0.14781366, 0.03512874, 0.00903247, -0.02803879, 0.03783317,
           -0.16920707, -0.26304603, -0.06992229, -0.10061786, 0.05101402, -0.16632022, 0.11655138, 0.08433184,
           -0.12079179, 0.03596556, -0.0121152, 0.12947829, 0.04827371, -0.08188809, 0.18349151, -0.00281307,
           -0.15602723, 0.06405699, 0.04490693, 0.31951201, 0.17494193, 0.01719636, -0.0419702, -0.08516614,
           0.12460594, -0.21499792, 0.06585026, 0.19651721, 0.09745228, 0.03903785, 0.10535515, -0.13724521,
           0.08984233, 0.13477094, -0.21704961, 0.05335507, 0.0309218, -0.05781218, 0.0019028, -0.09391791,
           0.0646577, 0.06179845, -0.08008289, -0.14667159, 0.20857613, -0.18729421, -0.06652444, 0.14170116,
           -0.1157265, -0.1452689, -0.24668945, 0.04148631, 0.40796083, 0.21065351, -0.11024678, 0.02329403,
           -0.01277202, -0.04557295, 0.07328524, 0.03643153, -0.17143802, -0.08823329, -0.10314541, 0.11035879,
           0.15545008, 0.09105477, -0.0749627, 0.19225572, 0.03504357, -0.04319753, 0.07131915, 0.02174823,
           -0.08037397, 0.02350202, -0.12592137, -0.0058411, 0.06064202, -0.16452999, -0.01263573, 0.0567708,
           -0.13627924, 0.06755719, -0.01812054, -0.00742016, -0.0428388, 0.01858514, -0.18413505, 0.08322754,
           0.24775918, -0.29474801, 0.18072528, 0.21811365, 0.03798047, 0.06725502, 0.17808905, 0.0480503,
           -0.01554211, -0.12508231, -0.1766559, -0.07591728, 0.04641546, -0.08250329, 0.07233171, 0.03478055]

howard =  [-0.07328258,0.08921804,0.10426305,-0.00475667,-0.14735395,0.06808552
,-0.03262573,-0.07277855,0.08965688,-0.06791907,0.14212586,-0.0436127
,-0.20800005,0.04020393,-0.01704537,0.09710031,-0.19030289,-0.07047584
,-0.14128037,-0.14784968,-0.08624854,0.08838581,0.01016185,0.01071011
,-0.16654544,-0.27700606,-0.04281839,-0.12710637,0.10373386,-0.04905636
,-0.00640265,-0.12542273,-0.15443799,0.01143604,0.09738316,0.01653805
,-0.01559667,-0.03813609,0.19700354,-0.02030092,-0.11950657,0.02110918
,0.12407593,0.24170081,0.11449112,0.07317211,0.01339612,-0.08748563
,0.20247045,-0.2134365,0.10149236,0.15442306,0.11756072,0.07500571
,0.10611999,-0.13890722,-0.04304402,0.20622535,-0.08979225,0.19318517
,0.08958002,0.05754489,-0.03309987,-0.07453679,0.2086187,0.06323769
,-0.14491107,-0.17551301,0.12124779,-0.16225655,-0.04942785,0.04443482
,-0.08390909,-0.12622848,-0.20959413,0.04518243,0.45896238,0.12029397
,-0.19599245,-0.0887173,-0.09508815,-0.0486131,0.04207542,0.07647044
,-0.08635993,-0.07414918,0.00246335,0.04055846,0.26461264,-0.04890757
,0.05008629,0.18593822,0.02086583,-0.01203934,-0.07844058,-0.00900769
,-0.1869849,0.0039141,-0.05161823,0.00319614,0.02525917,-0.08346418
,0.07716899,0.1039031,-0.2612268,0.1941198,-0.00407775,-0.06391671
,0.06887747,0.11834231,-0.10340711,-0.04222004,0.24216878,-0.2637656
,0.25140417,0.2010593,0.03704405,0.09306584,0.00831325,0.09034096
,0.05721123,0.10283227,-0.09351583,-0.1343606,-0.04362211,-0.14492241
,-0.02982574,0.01397364]

rachel = [-0.11000438,0.13291083,0.10929853,-0.09376788,-0.11546643,0.04707323
,-0.02445818,-0.06022483,0.2421784,-0.03187202,0.22803621,0.00303524
,-0.26133183,0.01320014,0.03812898,0.18885389,-0.18793011,-0.10162055
,-0.13129412,-0.0472599,-0.04506315,0.04291776,0.04913482,0.06707913
,-0.23790345,-0.33431414,-0.01311908,-0.09728463,0.0276542,-0.10077891
,0.05449105,0.05144963,-0.18232466,-0.00992423,0.06295077,0.0943357
,-0.05485546,-0.08885093,0.15487689,-0.06491595,-0.26604068,-0.03535644
,0.12136306,0.22020507,0.24480286,0.04337926,0.07887676,-0.08663692
,0.10165676,-0.40133229,0.08541653,0.10501733,-0.03821944,0.07644419
,0.11777919,-0.18329126,-0.0194883,0.15404069,-0.18073218,0.09579934
,0.14296572,-0.02360144,-0.01635439,-0.03223006,0.28059098,0.12099804
,-0.19762927,-0.18128255,0.08673555,-0.20389415,-0.03491485,0.1457608
,-0.05839385,-0.22112446,-0.31204954,0.03579858,0.35079828,0.18197922
,-0.15819921,0.05040441,-0.14632617,0.02683372,0.00368821,0.08054771
,0.02350946,-0.0387067,-0.10348565,-0.00684267,0.30269104,-0.04040734
,0.06162397,0.36321476,0.01667744,-0.09479874,-0.08104207,0.11242747
,-0.17582534,-0.02981914,-0.11241404,-0.06753457,0.07447242,0.0729809
,0.05845002,0.11771852,-0.26177451,0.22389601,-0.06965381,0.01703802
,0.08102097,-0.01828388,-0.06843151,-0.07207777,0.20260167,-0.31255049
,0.19754541,0.150654,0.04663651,0.11002625,0.08862524,0.06951057
,0.06336817,0.01072384,-0.08957475,-0.05462949,0.01315049,-0.11992195
,0.01305504,0.04696145]


chandler = [-0.16575048863887787, 0.16639873385429382, 0.08385086804628372, -0.03102976828813553, -0.22193695604801178, 0.009912139736115932, -0.04122598096728325, -0.055546849966049194, 0.13315752148628235, -0.006850928533822298, 0.14797186851501465, -0.054803911596536636, -0.19946347177028656, 0.03733600676059723, 0.010867665521800518, 0.16349779069423676, -0.12609753012657166, -0.1048194095492363, -0.10241636633872986, -0.08164431154727936, 0.012046934105455875, -0.028240269050002098, 0.026297472417354584, 0.1173764318227768, -0.20476357638835907, -0.21927490830421448, -0.097417451441288, -0.09915968030691147, 0.16154375672340393, -0.08458865433931351, -0.008825289085507393, -0.006155644543468952, -0.20250988006591797, -0.09990799427032471, -0.00255006505176425, 0.03469844534993172, -0.05414237454533577, -0.07970631122589111, 0.20590078830718994, -0.025633929297327995, -0.17653034627437592, 0.013223924674093723, 0.023446891456842422, 0.3106456398963928, 0.16918157041072845, 0.04899395629763603, 0.08168047666549683, -0.04123356565833092, 0.13495253026485443, -0.2765808403491974, 0.15897534787654877, 0.08308367431163788, 0.07300860434770584, 0.07742521911859512, 0.06041755899786949, -0.18833594024181366, 0.08142216503620148, 0.29036378860473633, -0.22480180859565735, 0.18545366823673248, 0.0956496074795723, -0.05899646505713463, -0.005174377467483282, -0.030565906316041946, 0.27964290976524353, 0.16938012838363647, -0.09023667871952057, -0.15304110944271088, 0.14059026539325714, -0.09091582894325256, 0.0008258429006673396, 0.1241622120141983, -0.12156832963228226, -0.10326918959617615, -0.41562914848327637, 0.07684742659330368, 0.4611019194126129, 0.1372266709804535, -0.20594902336597443, -0.06970527023077011, -0.04224638268351555, 0.06262696534395218, 0.10600099712610245, 0.06852899491786957, -0.15263596177101135, -0.14100795984268188, -0.11758843809366226, 0.019155234098434448, 0.2030174732208252, -0.007500418461859226, -0.039481308311223984, 0.2218782603740692, 0.1166408509016037, -0.06823979318141937, -0.01584886759519577, 0.11137267202138901, -0.14846216142177582, -0.10736874490976334, -0.06079057976603508, -0.021282555535435677, 0.06183113157749176, -0.04041793569922447, -0.01187569834291935, 0.17543241381645203, -0.22222495079040527, 0.1496802270412445, -0.005285813007503748, -0.008293593302369118, -0.07562647759914398, 0.011778191663324833, -0.11621031165122986, -0.025785163044929504, 0.1750779002904892, -0.2543625831604004, 0.16616496443748474, 0.18967582285404205, -0.017385108396410942, 0.07968951016664505, 0.060724951326847076, 0.04688672348856926, -0.006525960750877857, 0.03111046925187111, -0.06441689282655716, -0.03508404642343521, 0.12651482224464417, -0.11079341918230057, 0.05359622836112976, 0.09034834057092667]


ross = [0.06393729,0.16415235,0.10807271,0.080367,-0.07225583,0.08586863
,-0.10963871,0.01373029,0.17035492,-0.02209609,0.22795591,-0.01313165
,-0.20482519,-0.05751088,-0.01042243,0.18030961,-0.13715859,-0.02254726
,-0.15067978,0.00068229,-0.02981944,0.03140162,-0.01129152,-0.03404251
,-0.1060392,-0.37923068,-0.05724384,-0.05362454,0.04232532,-0.17432764
,-0.1112964,-0.01025462,-0.16741328,-0.11402173,0.02122615,0.00427912
,-0.0245431,-0.02558023,0.14661159,0.03569302,-0.16076282,0.06000694
,0.07819604,0.20488925,0.17604816,0.0728886,0.04441234,-0.06636839
,0.11438962,-0.23409696,0.06120865,0.125003,0.13164757,0.11711773
,0.1287699,-0.18129115,-0.08008433,0.22441669,-0.14569694,0.11928278
,-0.02203291,0.00162489,0.00217126,-0.02144297,0.15093461,0.11113219
,-0.04557727,-0.17103654,0.13645381,-0.10726736,0.00594006,0.03496898
,-0.03121386,-0.18180242,-0.35127324,0.0245027,0.31883442,0.11806908
,-0.26730898,-0.05359145,-0.0513933,-0.11077357,-0.00057909,0.0311084
,-0.05235017,-0.01068112,-0.07629604,0.00144444,0.2050944,-0.00103287
,0.09681858,0.2089487,-0.01799471,-0.02959353,-0.02533176,0.0473713
,-0.18019718,-0.01969153,-0.15739961,-0.07889681,0.00674977,-0.09688029
,-0.00359321,0.10650162,-0.23812276,0.11825138,-0.00102511,-0.05749905
,0.0164168,0.05521579,-0.06140233,-0.02348598,0.2494688,-0.22935726
,0.18473876,0.17462622,-0.02019324,0.10197356,0.03754619,0.11604469
,-0.02365587,-0.04382718,-0.12164509,-0.09213876,-0.04820636,-0.07632994
,-0.03868617,0.03260679]

q = []


# q.append(sheldon)
# q.append(howard)
import datetime
q.append(rachel)
q.append(ross)
q = numpy.array(q)
q = q.astype('float32')
a = datetime.datetime.now()
print("Search : ",search(q,"interval"))
b = datetime.datetime.now()
c = b-a
print("time required: ",c.microseconds)